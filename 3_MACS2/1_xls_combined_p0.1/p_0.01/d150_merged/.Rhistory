str(cds_subset)
###----- Make the CDS object
cds <- new_cell_data_set(exp_matrix,
cell_metadata = cell_meta,
gene_metadata = gene_anno)
###----- Make the CDS object
cds <- new_cell_data_set(expression_matrix = exp_matrix,
cell_metadata = cell_meta,
gene_metadata = gene_anno)
expression_matrix <- as.matrix(exp_tb)
expression_matrix <- Matrix(exp_matrix, sparse=TRUE)
###----- Match count matrix with info
colnames(expression_matrix) <- rownames(cell_meta)
rownames(expression_matrix) <- rownames(gene_anno)
###----- Make the CDS object
cds <- new_cell_data_set(expression_matrix,
cell_metadata = cell_meta,
gene_metadata = gene_anno)
ciliated_gennes <- c("Klrg1", "Smarc14", "Il2ra")
cds_subset = cds[rowData(cds)$gene_short_name %in% ciliated_genes,]
str(cds_subset)
cds_subset@colData$Size_Factor
gene_fits = fit_models(cds_subset, model_formula_str = "~Size_Factor")
str(cds_subset)
# Load the data
expression_matrix <- readRDS(url("http://staff.washington.edu/hpliner/data/cao_l2_expression.rds"))
cell_metadata <- readRDS(url("http://staff.washington.edu/hpliner/data/cao_l2_colData.rds"))
gene_annotation <- readRDS(url("http://staff.washington.edu/hpliner/data/cao_l2_rowData.rds"))
# Make the CDS object
cds.cao <- new_cell_data_set(expression_matrix,
cell_metadata = cell_metadata,
gene_metadata = gene_annotation)
ciliated_gennes <- c("Klrg1", "Smarca4", "Il2ra")
cds_subset = cds[rowData(cds)$gene_short_name %in% ciliated_genes,]
str(cds_subset)
cds_subset@rowRanges@partitioning
ciliated_genes = c("che-1",
"hlh-17",
"nhr-6",
"dmd-6",
"ceh-36",
"ham-1")
cds.cao_subset = cds.cao[rowData(cds.cao)$gene_short_name %in% ciliated_genes,]
cds.cao_subset@rowRanges@partitioning
ciliated_genes = c("che-1", "hlh-17") # "nhr-6", "dmd-6", "ceh-36", "ham-1"
cds.cao_subset = cds.cao[rowData(cds.cao)$gene_short_name %in% ciliated_genes,]
cds.cao_subset@rowRanges@partitioning
rowData(cds)
rowData(cds)$gene_short_name
rowData(cds.cao)$gene_short_name
"Klrg1" %in% rowData(cds)$gene_short_name
"Smarca4" %in% rowData(cds)$gene_short_name
"Il2ra" %in% rowData(cds)$gene_short_name
"che-1" %in% rowData(cds.cao)$gene_short_name
ciliated_gennes <- c("Klrg1", "Smarca4", "Il2ra")
cds_subset = cds[rowData(cds)$gene_short_name %in% ciliated_genes,]
cds_subset@rowRanges@partitioning
cds.cao@rowRanges@partitioning
cds@rowRanges@partitioning
# Load the data
expression_matrix_cao <- readRDS(url("http://staff.washington.edu/hpliner/data/cao_l2_expression.rds"))
cell_metadata_cao <- readRDS(url("http://staff.washington.edu/hpliner/data/cao_l2_colData.rds"))
gene_annotation_cao <- readRDS(url("http://staff.washington.edu/hpliner/data/cao_l2_rowData.rds"))
# Make the CDS object
cds.cao <- new_cell_data_set(expression_matrix_cao,
cell_metadata = cell_metadata_cao,
gene_metadata = gene_annotation_cao)
ciliated_genes = c("che-1", "hlh-17") # "nhr-6", "dmd-6", "ceh-36", "ham-1"
cds.cao_subset = cds.cao[rowData(cds.cao)$gene_short_name %in% ciliated_genes,]
cds.cao_subset@rowRanges@partitioning
rowData(cds)$gene_short_name
cds_subset = cds[rowData(cds)$gene_short_name %in% ciliated_genes,]
cds_subset@rowRanges@partitioning
rowData(cds)$gene_short_name
ciliated_gennes <- c("Gsn", "Phf19")
cds_subset = cds[rowData(cds)$gene_short_name %in% ciliated_genes,]
str(cds_subset)
cds_subset@colData$Size_Factor
cds_subset@rowRanges@partitioning
class(expression_matrix_cao)
class(expression_matrix)
class(cell_metadata_cao)
class(cell_meta)
class(gene_annotation_cao)
class(gene_anno)
rownames(expression_matrix_cao)
rownames(expression_matrix)
norm_counts <- "/Volumes/Yolanda/Exp334CD25KOSc/0_codes/1_2_PAGA_allgenes/all_norm_counts.csv"
obs <- "/Volumes/Yolanda/Exp334CD25KOSc/0_codes/1_2_PAGA/obs.csv"
var <- "/Volumes/Yolanda/Exp334CD25KOSc/0_codes/1_2_PAGA_allgenes/var.csv"
###----- Read count file
exp_tb <- read_csv(norm_counts)
exp_tb$X1 <- NULL
exp_tb <- as_tibble(cbind(t(exp_tb)))
# Convert to sparce matrix
expression_matrix <- as.matrix(exp_tb)
expression_matrix <- Matrix(exp_matrix, sparse=TRUE)
###----- Read cell meta data
cell_meta <- read_csv(obs)
cell_meta <- as.data.frame(cell_meta)
rownames(cell_meta) <- cell_meta$`0`
cell_meta$`0` <- NULL
cell_meta
###----- Read gene annotation
var_anno <- read_csv(var)
gene_anno <- data.frame(gene_short_name = var_anno$X1)
rownames(gene_anno) <- var_anno$gene_ids
###----- Match count matrix with info
colnames(expression_matrix) <- rownames(cell_meta)
rownames(expression_matrix) <- rownames(gene_anno)
###----- Make the CDS object
cds <- new_cell_data_set(expression_matrix,
cell_metadata = cell_meta,
gene_metadata = gene_anno)
rownames(expression_matrix)
class(expression_matrix)
colnames(expression_matrix_cao)
colnames(expression_matrix)
rownames(cell_metadata_cao)
rownames(cell_meta)
colnames(cell_meta)
colnames(cell_metadata_cao)
rownames(gene_annotation_cao)
rownames(gene_anno)
colnames(gene_annotation_cao)
colnames(gene_anno)
dim(expression_matrix_cao)
dim(expression_matrix)
dim(gene_annotation_cao)
dim(gene_anno)
dim(cell_meta)
dim(cell_metadata_cao)
ciliated_gennes <- c("Gsn", "Phf19")
cds_subset = cds[rowData(cds)$gene_short_name %in% ciliated_genes,]
cds_subset@rowRanges@partitioning
cds[rowData(cds)$gene_short_name %in% ciliated_genes,]
cds.cao[rowData(cds.cao)$gene_short_name %in% ciliated_genes,]
rowData(cds.cao)
rowData(cds)
rowData(cds.cao)$gene_short_name %in% ciliated_genes
rowData(cds)$gene_short_name %in% ciliated_genes
rowData(cds)$gene_short_name[1:5]
ciliated_gennes <- c("Mrpl15", "Lypla1")
ciliated_gennes <- c("Mrpl15", "Lypla1")
rowData(cds)$gene_short_name %in% ciliated_genes
ciliated_genes = c("che-1", "hlh-17")
class(rowData(cds))
class(rowData(cds.cao))
rowData(cds.cao)$gene_short_name %in% ciliated_genes
rowData(cds.cao)$gene_short_name[361:370]
rowData(cds.cao)$gene_short_name[361:378]
ciliated_gennes = c("Mrpl15", "Lypla1")
rowData(cds.cao)$gene_short_name %in% ciliated_genes
rowData(cds)$gene_short_name %in% ciliated_genes
rowData(cds)$gene_short_name
ciliated_genes = c("che-1", "hlh-17")
rowData(cds.cao)$gene_short_name %in% ciliated_genes
ciliated_gennes = c("Mrpl15", "Lypla1")
rowData(cds)$gene_short_name %in% ciliated_genes
rowData(cds)$gene_short_name
rowData(cds)$gene_short_name[1]
rowData(cds)$gene_short_name[1] %in% ciliated_genes
ciliated_gennes = c("Mrpl15", "Lypla1")
rowData(cds)$gene_short_name[1] %in% ciliated_genes
as.character(rowData(cds)$gene_short_name[1]) %in% ciliated_genes
as.character(rowData(cds)$gene_short_name[1])
as.character(rowData(cds)$gene_short_name[1]) %in% ciliated_genes
ciliated_genes
ciliated_gennes = c("Mrpl15", "Lypla1")
ciliated_genes
slt_genes <-  c("Mrpl15", "Lypla1")
as.character(rowData(cds)$gene_short_name[1]) %in% slt_genes
cds_subset = cds[rowData(cds)$gene_short_name %in% slt_genes,]
cds_subset@rowRanges@partitioning
gene_fits = fit_models(cds_subset, model_formula_str = "~Size_Factor")
fit_coefs = coefficient_table(gene_fits)
unique(fit_coefs$term)
######################################## DEsingle differential analysis ########################################
# Author: Huitian (Yolanda) Diao
# July 12th, 2019
######################################## Libraries ########################################
library(dplyr)
library(tidyverse)
library(DEsingle)
library(tidyverse)
wk.dir <- "/Volumes/Yolanda/Exp334CD25KOSc/4_DEsingle"
setwd(wk.dir)
###----- Read reference files
var.file <- "/Volumes/Yolanda/Exp334CD25KOSc/0_codes/1_2_PAGA_allgenes/var.csv"
var.tb <- read_csv(var.file)
gene.vec <- var.tb$X1
obs.file <- "/Volumes/Yolanda/Exp334CD25KOSc/0_codes/1_2_PAGA/obs--obsm_fa.csv"
obs.tb <- read_csv(obs.file)
louvain <- as.character(obs.tb$louvain)
cell_type <- as.character(obs.tb$cell_type)
cell_type_louvain <- paste(cell_type, louvain, sep="_")
###----- Read input count file
norm.count.file <- "/Volumes/Yolanda/Exp334CD25KOSc/0_codes/1_2_PAGA_allgenes/all_norm_counts_named.csv"
norm.count.tb <- read_csv(norm.count.file)
norm.count.tb$cell_id <- NULL
norm.count.tb$louvain <- louvain # For filtering
norm.count.tb$cell_type_louvain <- cell_type_louvain # For filtering
for (i in c(0:9)) {
i<-0
ko.name <- paste("CD25KO_", as.character(i), sep="")
wt.name <- paste("CD25WT_", as.character(i), sep="")
c.use <- c(ko.name, wt.name)
norm.count.tb.use <- norm.count.tb %>% filter(cell_type_louvain %in% c.use)
ctl.use <- as.factor(norm.count.tb.use$cell_type_louvain)
norm.count.tb.use$louvain <- NULL
norm.count.tb.use$cell_type_louvain <- NULL
norm.count.tb.use <- as_tibble(cbind(t(norm.count.tb.use)))
norm.count.mtx <- as.matrix(norm.count.tb.use)
rownames(norm.count.mtx) <- gene.vec
results <- DEsingle(counts=norm.count.mtx, group=ctl.use)
results.classified <- DEtype(results = results, threshold = 0.05)
out.csv.name <- paste("C", as.character(i), "_KO_vs_WT.csv", sep="")
write.csv(results, out.csv.name)
out.csv.name.classified <- paste("C", as.character(i), "_KO_vs_WT_classified.csv", sep="")
write.csv(results.classified, out.csv.name.classified)
}
#--- Between clusters
for (i in c(0:8)) {
for (j in c((i+1):9)) {
c.use <- c(as.character(i), as.character(j))
norm.count.tb.use <- norm.count.tb %>% filter(louvain %in% c.use)
louvain.use <- as.factor(norm.count.tb.use$louvain)
norm.count.tb.use$louvain <- NULL
norm.count.tb.use$cell_type_louvain <- NULL
norm.count.tb.use <- as_tibble(cbind(t(norm.count.tb.use)))
norm.count.mtx <- as.matrix(norm.count.tb.use)
rownames(norm.count.mtx) <- gene.vec
results <- DEsingle(counts=norm.count.mtx, group=louvain.use)
results.classified <- DEtype(results = results, threshold = 0.05)
out.csv.name <- paste("C", as.character(i), "_vs_C", as.character(j), ".csv", sep="")
write.csv(results, out.csv.name)
out.csv.name.classified <- paste("C", as.character(i), "_vs_C", as.character(j), "_classified.csv", sep="")
write.csv(results.classified, out.csv.name.classified)
}
}
source('/Volumes/Yolanda/Exp334CD25KOSc/0_codes/1_4_DEsingle.R')
for (i in c(6:9)) {
ko.name <- paste("CD25KO_", as.character(i), sep="")
wt.name <- paste("CD25WT_", as.character(i), sep="")
c.use <- c(ko.name, wt.name)
norm.count.tb.use <- norm.count.tb %>% filter(cell_type_louvain %in% c.use)
ctl.use <- as.factor(norm.count.tb.use$cell_type_louvain)
norm.count.tb.use$louvain <- NULL
norm.count.tb.use$cell_type_louvain <- NULL
norm.count.tb.use <- as_tibble(cbind(t(norm.count.tb.use)))
norm.count.mtx <- as.matrix(norm.count.tb.use)
rownames(norm.count.mtx) <- gene.vec
results <- DEsingle(counts=norm.count.mtx, group=ctl.use)
results.classified <- DEtype(results = results, threshold = 0.05)
out.csv.name <- paste("C", as.character(i), "_KO_vs_WT.csv", sep="")
write.csv(results, out.csv.name)
out.csv.name.classified <- paste("C", as.character(i), "_KO_vs_WT_classified.csv", sep="")
write.csv(results.classified, out.csv.name.classified)
}
#--- Between clusters
for (i in c(0:8)) {
for (j in c((i+1):9)) {
c.use <- c(as.character(i), as.character(j))
norm.count.tb.use <- norm.count.tb %>% filter(louvain %in% c.use)
louvain.use <- as.factor(norm.count.tb.use$louvain)
norm.count.tb.use$louvain <- NULL
norm.count.tb.use$cell_type_louvain <- NULL
norm.count.tb.use <- as_tibble(cbind(t(norm.count.tb.use)))
norm.count.mtx <- as.matrix(norm.count.tb.use)
rownames(norm.count.mtx) <- gene.vec
results <- DEsingle(counts=norm.count.mtx, group=louvain.use)
results.classified <- DEtype(results = results, threshold = 0.05)
out.csv.name <- paste("C", as.character(i), "_vs_C", as.character(j), ".csv", sep="")
write.csv(results, out.csv.name)
out.csv.name.classified <- paste("C", as.character(i), "_vs_C", as.character(j), "_classified.csv", sep="")
write.csv(results.classified, out.csv.name.classified)
}
}
i <- 6
ko.name <- paste("CD25KO_", as.character(i), sep="")
wt.name <- paste("CD25WT_", as.character(i), sep="")
c.use <- c(ko.name, wt.name)
norm.count.tb.use <- norm.count.tb %>% filter(cell_type_louvain %in% c.use)
ctl.use <- as.factor(norm.count.tb.use$cell_type_louvain)
norm.count.tb.use$louvain <- NULL
norm.count.tb.use$cell_type_louvain <- NULL
norm.count.tb.use <- as_tibble(cbind(t(norm.count.tb.use)))
norm.count.mtx <- as.matrix(norm.count.tb.use)
rownames(norm.count.mtx) <- gene.vec
results <- DEsingle(counts=norm.count.mtx, group=ctl.use)
results.classified <- DEtype(results = results, threshold = 0.05)
out.csv.name <- paste("C", as.character(i), "_KO_vs_WT.csv", sep="")
write.csv(results, out.csv.name)
out.csv.name.classified <- paste("C", as.character(i), "_KO_vs_WT_classified.csv", sep="")
write.csv(results.classified, out.csv.name.classified)
i <- 5
ko.name <- paste("CD25KO_", as.character(i), sep="")
wt.name <- paste("CD25WT_", as.character(i), sep="")
c.use <- c(ko.name, wt.name)
norm.count.tb.use <- norm.count.tb %>% filter(cell_type_louvain %in% c.use)
ctl.use <- as.factor(norm.count.tb.use$cell_type_louvain)
norm.count.tb.use$louvain <- NULL
norm.count.tb.use$cell_type_louvain <- NULL
norm.count.tb.use <- as_tibble(cbind(t(norm.count.tb.use)))
norm.count.mtx <- as.matrix(norm.count.tb.use)
rownames(norm.count.mtx) <- gene.vec
results <- DEsingle(counts=norm.count.mtx, group=ctl.use)
results.classified <- DEtype(results = results, threshold = 0.05)
out.csv.name <- paste("C", as.character(i), "_KO_vs_WT.csv", sep="")
write.csv(results, out.csv.name)
out.csv.name.classified <- paste("C", as.character(i), "_KO_vs_WT_classified.csv", sep="")
write.csv(results.classified, out.csv.name.classified)
#--- Between WT and KO
for (i in c(7:9)) {
ko.name <- paste("CD25KO_", as.character(i), sep="")
wt.name <- paste("CD25WT_", as.character(i), sep="")
c.use <- c(ko.name, wt.name)
norm.count.tb.use <- norm.count.tb %>% filter(cell_type_louvain %in% c.use)
ctl.use <- as.factor(norm.count.tb.use$cell_type_louvain)
norm.count.tb.use$louvain <- NULL
norm.count.tb.use$cell_type_louvain <- NULL
norm.count.tb.use <- as_tibble(cbind(t(norm.count.tb.use)))
norm.count.mtx <- as.matrix(norm.count.tb.use)
rownames(norm.count.mtx) <- gene.vec
results <- DEsingle(counts=norm.count.mtx, group=ctl.use)
results.classified <- DEtype(results = results, threshold = 0.05)
out.csv.name <- paste("C", as.character(i), "_KO_vs_WT.csv", sep="")
write.csv(results, out.csv.name)
out.csv.name.classified <- paste("C", as.character(i), "_KO_vs_WT_classified.csv", sep="")
write.csv(results.classified, out.csv.name.classified)
}
#--- Between clusters
for (i in c(0:8)) {
for (j in c((i+1):9)) {
c.use <- c(as.character(i), as.character(j))
norm.count.tb.use <- norm.count.tb %>% filter(louvain %in% c.use)
louvain.use <- as.factor(norm.count.tb.use$louvain)
norm.count.tb.use$louvain <- NULL
norm.count.tb.use$cell_type_louvain <- NULL
norm.count.tb.use <- as_tibble(cbind(t(norm.count.tb.use)))
norm.count.mtx <- as.matrix(norm.count.tb.use)
rownames(norm.count.mtx) <- gene.vec
results <- DEsingle(counts=norm.count.mtx, group=louvain.use)
results.classified <- DEtype(results = results, threshold = 0.05)
out.csv.name <- paste("C", as.character(i), "_vs_C", as.character(j), ".csv", sep="")
write.csv(results, out.csv.name)
out.csv.name.classified <- paste("C", as.character(i), "_vs_C", as.character(j), "_classified.csv", sep="")
write.csv(results.classified, out.csv.name.classified)
}
}
######################################## CR expr analysis ########################################
# Author: Huitian (Yolanda) Diao
# Aug 4th, 2019
######################################## Libraries ########################################
library(dplyr)
library(tidyverse)
library(pheatmap)
library(RColorBrewer)
library(ComplexHeatmap)
library("org.Mm.eg.db")
library(clusterProfiler)
library(circlize)
library(RColorBrewer)
library(viridis)
library(reshape2)
library(igraph)
library(FNN)
library(ggrepel)
######################################## Self-defined functions ########################################
save_pheatmap_pdf <- function(x, filename, width=7, height=7) {
stopifnot(!missing(x))
stopifnot(!missing(filename))
pdf(filename, width=width, height=height)
grid::grid.newpage()
grid::grid.draw(x$gtable)
dev.off()
}
GO_run <- function(genes.i, i){
genes.i.id <- AnnotationDbi::select(org.Mm.eg.db, genes.i, c("ENTREZID"), "ALIAS")
egoBP <- enrichGO(gene = genes.i.id$ENTREZID, keyType = 'ENTREZID', OrgDb = org.Mm.eg.db, ont = "BP", pAdjustMethod = "none", pvalueCutoff = 0.05, readable = TRUE)
egoCC <- enrichGO(gene = genes.i.id$ENTREZID, keyType = 'ENTREZID', OrgDb = org.Mm.eg.db, ont = "CC", pAdjustMethod = "none", pvalueCutoff = 0.05, readable = TRUE)
egoMF <- enrichGO(gene = genes.i.id$ENTREZID, keyType = 'ENTREZID', OrgDb = org.Mm.eg.db, ont = "MF", pAdjustMethod = "none", pvalueCutoff = 0.05, readable = TRUE)
# Dotplot visualization
if (!is.null(egoBP)){
pdf.name <- paste(i,"_BP_dotplot.pdf",sep="")
csv.name <- paste(i,"_BP_dotplot.csv",sep="")
write.csv(egoBP@result, file=csv.name, row.names=FALSE)
egoBP.dotplot <- dotplot(egoBP, x="count", showCategory=25)
ggsave(pdf.name, egoBP.dotplot, device = "pdf", width = 30, height = 20, units = "cm")
}
if(!is.null(egoCC)){
csv.name <- paste(i,"_CC_dotplot.csv",sep="")
pdf.name <- paste(i,"_CC_dotplot.pdf",sep="")
write.csv(egoCC@result, file=csv.name, row.names=FALSE)
egoCC.dotplot <- dotplot(egoCC, x="count", showCategory=25)
ggsave(pdf.name, egoCC.dotplot, device = "pdf", width = 30, height = 20, units = "cm")
}
if(!is.null(egoMF)){
csv.name <- paste(i,"_MF_dotplot.csv",sep="")
pdf.name <- paste(i,"_MF_dotplot.pdf",sep="")
write.csv(egoMF@result, file=csv.name, row.names=FALSE)
egoMF.dotplot <- dotplot(egoMF, x="count", showCategory=25)
ggsave(paste(i,"_MF_dotplot.pdf",sep=""), egoMF.dotplot, device = "pdf", width = 30, height = 20, units = "cm")
}
}
cvt_names <- function(vec_x, in_vec, out_vec){
vec_x_out <- c()
for (i in vec_x) {
if (i %in% in_vec){
i_idx <- match(i, in_vec)
vec_x_out <- c(vec_x_out,out_vec[i_idx])
} else {
vec_x_out <- c(vec_x_out, i)
}
}
return(vec_x_out)
}
######################################## Main ########################################
###----- Calculate sqrt-z
if (FALSE) {
wk.dir <- "/Volumes/YOLANDA/Exp334CD25KOSc/5_CR/0_PAGA_cluster_expr_all"
setwd(wk.dir)
z.cr <- "all_norm_counts_named_nbPctl_z_avgLouvain_Z_CR.csv"
z.cr.tb <- read_csv(z.cr)
col_order <- c("gene_name", "0", "6","5","3","9","8","4","1","2","7")
z.cr.tb <- z.cr.tb%>% mutate_if(is.numeric, function(x) {sqrt(abs(x)) * x / abs(x)})
z.cr.tb <- z.cr.tb %>% dplyr::select(one_of(col_order))
write_csv(z.cr.tb, "all_norm_counts_named_nbPctl_z_avgLouvain_Z_CR_sqrt.csv")
}
###----- UMAP - Louvain cluster identification
wk.dir <- "/Volumes/YOLANDA/Exp334CD25KOSc/5_CR/0_PAGA_cluster_expr_all/1_umap"
umap.file <- "/Volumes/YOLANDA/Exp334CD25KOSc/5_CR/0_PAGA_cluster_expr_all/1_umap/CR_z_sqrt_umap.csv"
umap.all <- read_csv(umap.file)
umap.all$X1 <- NULL
colnames(umap.all) <- c("umap1", "umap2", "gene_name")
umap.real <- umap.all %>% dplyr::select(one_of(c("umap1", "umap2")))
info.real <- umap.all
###----- Clustering
k <- 50
knn.real <- get.knn(as.matrix(umap.real), k = k)
knn.real <- data.frame(from = rep(1:nrow(knn.real$nn.index), k), to = as.vector(knn.real$nn.index), weight = 1/(1 + as.vector(knn.real$nn.dist)))
nw.real <- graph_from_data_frame(knn.real, directed = FALSE)
nw.real <- simplify(nw.real)
lc.real <- cluster_louvain(nw.real) #, gamma = 0.1
info.real$louvain <- as.factor(membership(lc.real))
lc.cent <- info.real %>% group_by(louvain) %>% dplyr::select(umap1, umap2) %>% summarize_all(mean)
label.plot <- ggplot(info.real, aes(x = umap1, y = umap2, colour = louvain, label = gene_name)) +
#geom_text() +
geom_point(alpha = 0.6) + theme_bw() +
geom_label_repel(aes(label = louvain), data = lc.cent) +
#geom_text_repel(
#  data = subset(info.real, info.real$gene_name %in% baf.mem),
#  point.padding = NA, force = 2.5) +
guides(colour = FALSE)
label.plot
###----- Combine with z-score
z.cr.sqrt.file <- "/Volumes/YOLANDA/Exp334CD25KOSc/5_CR/0_PAGA_cluster_expr_all/0_original/all_norm_counts_named_nbPctl_z_avgLouvain_Z_CR_sqrt.csv"
z.cr.sqrt.tb <- read_csv(z.cr.sqrt.file)
z.cr.sqrt.tb
info.real
louvain.tb <- info.real %>% dplyr::select(one_of(c("gene_name", "louvain")))
z.cr.sqrt.tb <- z.cr.sqrt.tb %>% left_join(louvain.tb, by="gene_name")
z.cr.sqrt.tb
z.cr.sqrt.tb <- z.cr.sqrt.tb %>% arrange(louvain)
z.cr.sqrt.tb
heatmap.tb <- z.cr.sqrt.tb
heatmap.tb$gene_name <- NULL
heatmap.tb <- heatmap.tb %>% column_to_rownames(gene_name)
heatmap.tb <- z.cr.sqrt.tb
heatmap.tb$gene_name <- NULL
heatmap.tb <- heatmap.tb %>% column_to_rownames(var="gene_name")
heatmap.tb <- z.cr.sqrt.tb
heatmap.tb$gene_name <- NULL
heatmap.tb <- heatmap.tb %>% column_to_rownames("gene_name")
z.cr.sqrt.tb
heatmap.tb <- z.cr.sqrt.tb
heatmap.tb$gene_name <- NULL
heatmap.tb <- heatmap.tb %>% column_to_rownames("louvain")
heatmap.tb <- z.cr.sqrt.tb
heatmap.tb$louvain <- NULL
heatmap.tb <- heatmap.tb %>% column_to_rownames("gene_name")
my.breaks <- seq(from=-1.5, to=1.5, by=0.05)
col.pal <- colorRampPalette(brewer.pal(n=11, name="RdBu"))
col.use <- rev(col.pal(length(my.breaks)))
pheatmap(plot.tb, color=col.use, breaks=my.breaks, annotation_row=annotation_row)
pheatmap(heatmap.tb, color=col.use, breaks=my.breaks, annotation_row=annotation_row)
heatmap.tb <- z.cr.sqrt.tb
annotation_row <- data.frame(group=heatmap.tb$louvain)
rownames(annotation_row) <- heatmap.tb$gene_name
heatmap.tb$louvain <- NULL
heatmap.tb <- heatmap.tb %>% column_to_rownames("gene_name")
my.breaks <- seq(from=-1.5, to=1.5, by=0.05)
col.pal <- colorRampPalette(brewer.pal(n=11, name="RdBu"))
col.use <- rev(col.pal(length(my.breaks)))
pheatmap(heatmap.tb, color=col.use, breaks=my.breaks, annotation_row=annotation_row)
pheatmap(heatmap.tb, color=col.use, breaks=my.breaks, annotation_row=annotation_row, cluster_rows = FALSE)
pheatmap(heatmap.tb, color=col.use, breaks=my.breaks, annotation_row=annotation_row, cluster_rows = FALSE, cluster_cols = FALSE)
order_comparisons <- c("C0", "C6", "C5","C3","C9","C8","C4","C1","C2","C7")
order_comparisons_newnames <- c("p0", "p0.1", "p0.2", "p1", "p2", "p3", "p4", "p5", "p6", "p7")
cb.file <- "louvain_expr_GSEA-All_manuallycombined.csv"
new.cb.file <- "louvain_expr_GSEA-All_manuallycombined_newPAGAnames.csv"
cb.tb <- read_csv(cb.file)
cb.tb$comparison <- vec_alt_replacement(cb.tb$comparison, order_comparisons, order_comparisons_newnames)
write_csv(cb.tb, new.cb.file)
source('/Volumes/Yolanda/Exp334CD25KOSc/0_codes/1_2_2_PAGA_cluster_gene_expr_GSEA.R')
y <- 1:4
y
ls()
source('/Volumes/Yolanda/JYC_DataAnalysis/z_codes_local/0_4_MACS_peak_gene_summit_sig_plot.R')
source('/Volumes/Yolanda/JYC_DataAnalysis/z_codes_local/0_4_MACS_peak_gene_summit_sig_plot.R')
source('/Volumes/Yolanda/JYC_DataAnalysis/z_codes_local/0_4_MACS_peak_gene_summit_sig_plot.R')
source('/Volumes/Yolanda/JYC_DataAnalysis/z_codes_local/0_4_MACS_peak_gene_summit_sig_plot.R')
